using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;

public class BoardCreator : MonoBehaviour {

	// SerializeField: editable in Unity but not visible to other scripts
	[SerializeField] GameObject tileViewPrefab;
	[SerializeField] GameObject tileSelectionIndicatorPrefab;

	// max bounds of the board
	[SerializeField] int width = 10;
	[SerializeField] int depth = 10;
	[SerializeField] int height = 8;

	// place holder for when we want to edit a specific tile
	[SerializeField] Point pos;

	// to load previously saved boards
	[SerializeField] LevelData levelData;


	// maps from a Point struct to a Tile instance; basically to know if there is a tile in a certain spot/coordinate
	Dictionary<Point, Tile> tiles = new Dictionary<Point, Tile>();

	// Lazy Loading	pattern: checks if the object has been instantiated; if not, instiates it
	Transform marker
	{
		get
		{
			if (_marker == null)
			{
				GameObject instance = Instantiate(tileSelectionIndicatorPrefab) as GameObject;
				_marker = instance.transform;
			}
			return _marker;
		}
	}
	Transform _marker;

	// to randomly set tile dimensions (randomly generate a board)
	public void GrowArea ()
	{
		Rect r = RandomRect();
		GrowRect(r);
	}
	public void ShrinkArea ()
	{
		Rect r = RandomRect();
		ShrinkRect(r);
	}

	// generates a Rect somewhere within the set bounds
	Rect RandomRect ()
	{
		int x = UnityEngine.Random.Range(0, width);
		int y = UnityEngine.Random.Range(0, depth);
		int w = UnityEngine.Random.Range(1, width - x + 1);
		int h = UnityEngine.Random.Range(1, depth - y + 1);
		return new Rect(x, y, w, h);
	}

	// Grow and Shrink Rect iterate through the tiles in the Rect generated by RandomRect and grow/shrink them
	void GrowRect (Rect rect)
	{
		for (int y = (int)rect.yMin; y < (int)rect.yMax; ++y)
		{
			for (int x = (int)rect.xMin; x < (int)rect.xMax; ++x)
			{
				Point p = new Point(x, y);
				GrowSingle(p);
			}
		}
	}
	void ShrinkRect (Rect rect)
	{
		for (int y = (int)rect.yMin; y < (int)rect.yMax; ++y)
		{
			for (int x = (int)rect.xMin; x < (int)rect.xMax; ++x)
			{
				Point p = new Point(x, y);
				ShrinkSingle(p);
			}
		}
	}

	// Growing tiles: get an instance of a specific Tile and grow Tile; if the instance does not exist, create instance
	Tile GetOrCreate (Point p)
	{
		if (tiles.ContainsKey(p))
			return tiles[p];

		Tile t = Create();
		t.Load(p, 0);
		tiles.Add(p, t);

		return t;
	}
	Tile Create ()
	{
		GameObject instance = Instantiate(tileViewPrefab) as GameObject;
		instance.transform.parent = transform;
		return instance.GetComponent<Tile>();
	}

	// grow/increase height of a single Tile
	void GrowSingle (Point p)
	{
		Tile t = GetOrCreate(p);
		if (t.height < height)
			t.Grow();
	}

	// Shrinking tiles: get instance of specific Tile and shrink Tile; if it does not exist, return; if height of Tile<=0, destroy Tile
	void ShrinkSingle (Point p)
	{
		if (!tiles.ContainsKey(p))
			return;

		Tile t = tiles[p];
		t.Shrink();

		if (t.height <= 0)
		{
			tiles.Remove(p);
			DestroyImmediate(t.gameObject);
		}
	}
		
	// manually (not randomly) grow/shrink tiles
	public void Grow ()
	{
		GrowSingle(pos);
	}
	public void Shrink ()
	{
		ShrinkSingle(pos);
	}

	// moves Tile Selector Indicator to modified Tile (just to see which Tile has been modified)
	public void UpdateMarker ()
	{
		Tile t = tiles.ContainsKey(pos) ? tiles[pos] : null;
		marker.localPosition = t != null ? t.center : new Vector3(pos.x, 0, pos.y);
	}

	// clear the board/remove all Tiles; used when you want to remake the board or when you want to load an existing board
	public void Clear ()
	{
		for (int i = transform.childCount - 1; i >= 0; --i)
			DestroyImmediate(transform.GetChild(i).gameObject);
		tiles.Clear();
	}


	// saves newly made/edited board
	public void Save ()
	{
		string filePath = Application.dataPath + "/Resources/Levels";
		if (!Directory.Exists(filePath))
			CreateSaveDirectory ();

		LevelData board = ScriptableObject.CreateInstance<LevelData>();
		board.tiles = new List<Vector3>( tiles.Count );
		foreach (Tile t in tiles.Values)
			board.tiles.Add( new Vector3(t.pos.x, t.height, t.pos.y) );

		string fileName = string.Format("Assets/Resources/Levels/{1}.asset", filePath, name);
		AssetDatabase.CreateAsset(board, fileName);
	}
	void CreateSaveDirectory ()
	{
		string filePath = Application.dataPath + "/Resources";
		if (!Directory.Exists(filePath))
			AssetDatabase.CreateFolder("Assets", "Resources");
		filePath += "/Levels";
		if (!Directory.Exists(filePath))
			AssetDatabase.CreateFolder("Assets/Resources", "Levels");
		AssetDatabase.Refresh();
	}

	// load existing/previously saved board
	public void Load ()
	{
		Clear();
		if (levelData == null)
			return;
		foreach (Vector3 v in levelData.tiles)
		{
			Tile t = Create();
			t.Load(v);
			tiles.Add(t.pos, t);
		}
	}
}
